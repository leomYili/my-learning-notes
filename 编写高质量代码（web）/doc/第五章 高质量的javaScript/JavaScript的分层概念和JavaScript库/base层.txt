base层的功能是为common层和page层提供接口。接口由两部分组成；
第一部分：“封装不同浏览器下JavaScript的差异，提供统一的接口”

典型兼容问题：
  1.透明
  <script>
    function setOpacity(node,level){
      node=typeof node==="string" ?document.getElementById(node) : node;
      if(document.all){
        node.style.filter='alpha(opacity="+level+")';
      }eles{
        node.style.opacity=level / 100;
      }
    }
    setOpacity("test1",200);
  </script>
  2.event对象
  不同浏览器中除了DOM的表现会有所不同，事件的表现也有很大的不同。在ie里，event是作为window的属性作用于全局作用域的，而在firefox中，event对象是作为事件的参数存在的。
  <script>
    function getEventTarget(e){
      e=window.event || e;
      return e.srcElement || e.target;
    }
    document.getElemnetById("test1").onclick=function(e){
      var node=getEventTarget(e);
      alert(node.tagName);
    }
  </script>
  通过封装的getEventTarget函数来得到派生事件的对象
  3.冒泡
  JavaScript对这种先触发子容器监听事件后触发父容器监听事件的现象称为事件的冒泡，在阻止事件冒泡的情况下，ie里通过设置event对象的cancelBubble属性为true实现的，而在Firefox下则是通过调用event对象的stopPropagation方法实现的
  4.on事件
  为了解决on XXX的冲突问题，可以使用attachEvent（ie）和addEventListener（Firefox）方法来代替on XXX监听事件。这俩个方法支持监听处理函数的叠加，而不是覆盖，

第二部分
  base的第二个职责是“扩展JavaScript语言底层的接口”。原生JavaScript底层提供的接口不算丰富，可以自定义一些常用的方法来弥补缺陷，也可使用一些JavaScript库
  例：
  （1）trim()：表单验证，输入框是否为空，（原生）
  function trim(ostr){
    return ostr.replace(/^\s+|\s+$/g,"");
  }
  var str="abc";
  alert(trim(str).length); //3
  alert(" "===""); //false
  alert(trim(" ") === ""); //true
  (2) 类型判断 isNumber、isString、isBoolean、isFunction、isNull、isUndefined、isEmpty、isArray添加类型判断的方法，
  function isNumber(s){
    return !isNaN(s);
  }
  function isString(s){
    return typeof s==="string"
  }
  (3)get(),$()
  在写JavaScript代码时，最常用的函数就是document.getElementById();可以对其进行简化；
  function get(node){
    node=typeof node==="string" ? document.getElementById(node) : node;
    return node;
  }
  function $(node){
    node=typeof node==="string" ? document.getElementById(node) : node;
  }
  alert($(test1).innerHTML);
  alert($(test2).innerHTML);
  (4)自定义class选择器
  <script>
    function $.C(str,root,tag){
      if(root){
        root=typeof root="string" ? document.getElementById(root) : root;
      }else{
        root=document.body();
      }
      tag=tag || "*";
      var els=root.getElementsByTagName(tag),arr[];
      for(var i=0;n=els.length;i<n;i++){
        for(var j=0,k=els[i].classname.split(" "),l=k.length;j<1;j++){
          if(k[j]===str){
            arr.push(els[i]);
            break;
          }
        }
      }
      return arr;
    }
    var aels=$.C("a"),bels=$.C("b","wrapper"),cels=$.C("c",null,"strong");
  </script>
  该函数接受三个参数，第一个参数是class名，第二个参数是父容器，缺省为body节点，第三个参数为DOM节点的标签名
  (5)extend
  JavaScript是支持面向对象的语言，但它并不提供extend方法用于继承，需要自定义方法
  function extend(subClass,superClass){
    var F=function(){};
    F.prototype=superClass.prototype;
    subClass.prototype=new F();
    subClass.prototype.constructor=subClass;
    subClass.superclass=superClass.prototype;
    if(superClass.prototype.constructor === Object.prototype.constructor){
      superClass.prototype.constructor=superClass;
    }
  }

  function Animal(name){
    this.name=name;
    this.type="animal";
  }

  Animal.prototype={
    say:function(){
      alert('I'm a(an)'+this.type+',my name is'+this.name);
    }
  }

  function Bird(name){
    this.constructor.superclass.constructor.apply(this,arguments);
    this.type="bird";
  }

  extend(Bird,Animal);
  Bird.prototype.fly=function(){
    alert("1212");
  }

  var canary=new Bird("lulala");
  canarry.say();
  canarry.fly();

  base层的接口从大的方向上来看，一共有三块，一块操作DOM，包括获取DOM节点和设置DOM属性，一块用来操作事件，包括访问event对象的属性和设置事件监听，还有一块是用来模仿其他语言提供原生JavaScript不提供的函数
